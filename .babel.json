{
  "{\"filename\":\"/home/andfaulkner/Projects/testbed/express-testbed/gulpfile.babel.js\",\"extra\":{},\"env\":{},\"retainLines\":false,\"nonStandard\":true,\"experimental\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"stage\":2,\"blacklist\":[],\"optional\":[],\"modules\":\"common\",\"moduleIds\":false,\"jsxPragma\":\"React.createElement\",\"plugins\":[],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"keepModuleIdExtensions\":false,\"auxiliaryCommentAfter\":\"\",\"externalHelpers\":false,\"metadataUsedHelpers\":false,\"breakConfig\":false,\"sourceType\":\"module\"}:5.8.20": {
    "metadata": {
      "modules": {
        "imports": [],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      },
      "usedHelpers": []
    },
    "ignored": false,
    "code": "'use strict';\n\nvar gulp = require('gulp');\n\n//NODE MODULES & JS LIBRARIES\nvar path = require('path'),\n    fs = require('fs-extra'),\n    yargs = require('yargs'),\n    merge = require('merge2'),\n    _ = require('lodash'),\n    del = require('del'),\n    async = require('async');\n\nrequire('shelljs/global');\n\n//ECMA 6 POLYFILL\nrequire('babel/register');\nObject.getPrototypeOf.toString = function () {\n    return Object.toString();\n};\n\n//PIPE COMPONENTS\nvar catchErrors, consoleTaskReport, newerThanRootIfNotProduction, rmDebugCode;\n\n//COMMAND LINE PARAM HANDLING\nvar cmds, args;\n\n//UTILITY FUNCTIONS\nvar onError, resolveSrcAndDest;\n\n//------------------------------- PLUGINS --------------------------------//\n//PACKAGED GULP PLUGINS --- AVAILABLE VIA 'p.nameOfPackage'\nvar p = require('gulp-packages')(gulp, ['autoprefixer', // prefix css for multiple browsers\n'babel', // compile ECMA6 --> ECMA5\n'debug', // lists all files run thru it\n'dev', // Toggle html comments on & off\n'display-help', // Display help file\n'dust', // Compile Dust templates\n'express', // Launch express framework\n'exit', // Force quit Gulp process\n'filter', // Filter out unwanted files from stream\n'if-else', // if-else statements mid-stream\n'jshint', // display Javascript errors\n'newer', // Only push item through pipe if newer\n'livereload', // Relaunch in browser automatically\n'nodemon', // Keep server running - restart on crash\n'notify', // Tells you if a reload happens\n'plumber', // keep running if error occurs\n'print', // output errors to console\n'rename', // Rename files\n'replace', // find-and-replace text in files\n'rimraf', // remove files\n'sass', // compile scss and sass --> css\n'shell', // run shell commands with gulp\n'size', // output file size\n'stats', // provides stats on files passed thru stream\n'tap', // run function mid-stream\n'webpack']);\n\n//UNPACKAGEABLE GULP PLUGINS\n// compile webpack\nvar gutil = require('gulp-util');\nvar lazypipe = require('lazypipe');\nvar runSequence = require('run-sequence');\nvar livereload = require('gulp-livereload');\nvar notify = require('gulp-notify');\nvar wait = require('gulp-wait');\n//------------------------------------------------------------------------//\n\n//------------------------------ CONSTANTS -------------------------------//\nvar PATHS = require('./config/project-paths.json');\nvar SRC = path.join(__dirname, PATHS.srcdir),\n    DEST = path.join(__dirname, PATHS.destdir);\n//-----------------------------------------------------------------------//\n\n//------------------ COMMAND LINE PARAMETER HANDLING ---------------------//\n//Command line flags accepted by gulp\ncmds = ['test', 'production', 'stats', 'once'];\n\n/** Populate args object w/ command line args, setting each that was received to\n  * true in the args object, & all others to false. Referenced by argument name.\n  * @example args.production set to true if gulp launched w/ gulp --production.\n  */\nargs = (function populateArgs(argList, argObj) {\n    argList.forEach(function createArgObjFromArgArray(arg) {\n        argObj[arg] = yargs.argv[arg] === true;\n    });\n    return argObj;\n})(cmds, {});\n//------------------------------------------------------------------------//\n\n//------------------------------ UTILITIES ------------------------------//\n/**\n * Output webpack errors when caught.\n */\nonError = function onError(err) {\n    gutil.beep();\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    console.log('ERROR OCCURRED');\n    console.log(typeof err);\n    console.log(gutil.colors.red.bgWhite(err.toString()));\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    this.emit('restart');\n    this.emit('end');\n};\n\n/**\n * Based on a relative path to resource (or resources), emits an object\n * containing the full absolute paths (& glob) to the source files/dirs\n * (outObj.src) & destination dir (outObj.dest).\n *\n * @param {String} fPath: file or dir path. Assumes dir if it ends w '/'\n *           path is relative to root source & build paths. For dirs,\n *           values like \"bin/\" or \"public/images/\" expected; for files\n *           values like \"app.js\" or \"public/favicon.ico\" expected.\n * @return {Object<String,String>} property 'src' holds path to source\n *         dir or file; property dest contains path to destination dir\n */\nresolveSrcAndDest = function resolveSrcAndDest(fPath, opts) {\n    opts = opts || {};\n\n    //Handles param pointing to a directory\n    if (_.last(fPath.split('')) === '/') {\n        return {\n            src: path.join(SRC, fPath) + '**/*.' + (!!opts.ext ? opts.ext : '*'),\n            dest: path.join(DEST, fPath)\n        };\n    }\n\n    //Handles param pointing to a file\n    var destdir = fPath.match(/[a-zA-z\\/]+(?=\\/)\\//mig);\n    return {\n        src: path.join(SRC, fPath),\n        dest: _.isArray(destdir) ? path.join(DEST, destdir.join('')) : DEST\n    };\n};\n//-----------------------------------------------------------------------//\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~ REUSABLE PIPE COMPONENTS ~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ncatchErrors = lazypipe().pipe(p.plumber, { errorHandler: onError });\n\nconsoleTaskReport = lazypipe().pipe(catchErrors).pipe(p.print);\n\nnewerThanRootIfNotProduction = lazypipe().pipe(p.ifElse, !args.production, p.newer.bind(undefined, DEST));\n\n//\n// Lightweight templates for removing debug code when production flag set\n//\n// Removes single-line sections of javascript bookended by: /*<%*/  and  /*%>*/\n// E.g.  /*<%*/ console.log(\"this line of JS gets removed\"); /*%>*/\n// Removes multiline js blocks bookended by: /*<{{DEBUG*/  and  /*DEBUG}}>*/\n//                                    ...OR: /*<{{TEST*/   and   /*TEST}}>*/\n//\nrmDebugCode = lazypipe().pipe(p.ifElse, !!args.production, p.replace.bind(undefined, /\\/\\*<\\%.*\\%\\>\\*\\//g, '')).pipe(p.ifElse, !!args.production, p.replace.bind(undefined, /\\/\\*<\\{\\{DEBUG\\*\\/[\\s\\S]*?\\/\\*DEBUG\\}\\}\\>\\*\\//gm, '')).pipe(p.ifElse, !!args.production, p.replace.bind(undefined, /\\/\\*<\\{\\{TEST\\*\\/[\\s\\S]*?\\/\\*TEST\\}\\}\\>\\*\\//gm, ''));\n//#################################################################################\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STYLES  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\n/**\n * Compile SCSS to CSS, output to build directory.\n */\ngulp.task('sass', function sass() {\n    var filePaths = resolveSrcAndDest(PATHS.scss, { ext: 'sass' });\n\n    return gulp.src(filePaths.src).pipe(consoleTaskReport()).pipe(p.sass({ errLogToConsole: true })).pipe(p.ifElse(!!args.stats, p.size)).pipe(gulp.dest(filePaths.dest));\n});\n//#################################################################################\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ JS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\n/**\n * Transpiles all js files in source directory (/src) from ECMA6 to ECMA5,\n * outputs resultant js files into build directory (/build).\n */\ngulp.task('js-build', function () {\n    return consoleTaskReport().pipe(merge(PATHS.js.map(function (files) {\n        var filePaths = resolveSrcAndDest(files, { ext: 'js' });\n\n        return gulp.src(filePaths.src).pipe(p.filter(['*', '!**/*.swp', '!**/*.*~'])).pipe(consoleTaskReport()).pipe(p.babel({ compact: false })).on('error', onError).pipe(p.dev('got into js-build end!')).pipe(gulp.dest(filePaths.dest));\n    }))).on('error', onError);\n});\n//#################################################################################\n\n/**\n * Remove all files from build folder\n */\ngulp.task('cleanup', function (next) {\n    return del(['build/**/*'], next);\n});\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STATIC ASSETS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\n/**\n * Copies static assets from source directory into build directory.\n */\ngulp.task('copy', function copy() {\n    return merge(PATHS['static'].map(function (files) {\n        var filePaths = resolveSrcAndDest(files);\n\n        //Actually output the files\n        return gulp.src(filePaths.src).pipe(p.filter(['*', '!**/*.swp', '!**/*.*~'])).pipe(consoleTaskReport()).pipe(p.debug({ title: 'copy static assets:' })).pipe(p.ifElse(!!args.stats, p.size)).pipe(gulp.dest(filePaths.dest));\n    }));\n});\n//#################################################################################\n\nfunction fileExists(filePath, callback) {\n    fs.stat(filePath, function (err, stats) {\n        if (err) return callback(false);\n        return callback(stats.isFile());\n    });\n}\n\n/**\n * Each file\n * @param  {String}  filePath     path of file to check existence of\n * @param  {Boolean} isJSConfig   if true, will check for .js & .json of filePath\n *                                (filePath should have no ext in this case), &\n *                                only make new file if neither exist.\n * @param  {String}  defaultData  data to write into the file\n * @return {undefined}\n */\nfunction makeDefaultFiles(filePath, isJSConfig, defaultData) {\n    if (isJSConfig) {\n\n        async.some([filePath + '.js', filePath + '.json'], fileExists, function (result) {\n\n            if (result === true) return;\n            return fs.writeFile(filePath + '.json', defaultData, function (err) {\n                if (err) return console.log('_______openOrMake:: ERROR in fs.writeFile on ' + filePath + '.json. Error: ' + err);\n                return console.log('makeDefaultFiles:: new' + filePath + '.json file written!');\n            });\n        });\n\n        //if not js/json file\n    } else {\n\n            fileExists(filePath, function (doesExist) {\n                if (doesExist === true) return;\n                return fs.writeFile(filePath, defaultData, function (err) {\n                    if (err) return console.log('fs.writeFile ERROR: ' + filePath);\n                    return console.log('fs.writeFile success for ' + filePath);\n                });\n            });\n        }\n}\n\n//***************** CREATE FILES IF THEY DON'T EXIST BASED ON CONFIG CONTENTS *****************//\ngulp.task('makeRoutes', function makeRoutes() {\n\n    var routes = require(path.join(__dirname, 'config/routes.json'));\n    var defJSON = '{\"default\":\"default\"}'; //def contents to write if no file\n\n    fs.readFile(path.join(__dirname, 'config/default_view_template.dust'), function (err, dustData) {\n        if (err) throw err;\n\n        fs.readFile(path.join(__dirname, 'config/default_frontend_js_file.js'), function (err, clientJSData) {\n\n            routes.forEach(function (route) {\n                var fn = route.file || route.request_path;\n                var tplDataPathNoExt = path.join(__dirname, 'src/template-data', fn + '_tpldata'),\n                    tplViewPath = path.join(__dirname, 'src/views', fn + '_view.dust'),\n                    frontendJSPath = path.join(__dirname, 'src/public/javascripts', fn + '_frontend.js');\n\n                makeDefaultFiles(tplDataPathNoExt, true, defJSON);\n                makeDefaultFiles(tplViewPath, false, dustData);\n                makeDefaultFiles(frontendJSPath, false, _.template(clientJSData)({ routeNameCC: _.camelCase(fn), routeName: fn }));\n            });\n        });\n    });\n\n    console.log('past forEach');\n});\n//********************************************************************//\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LIVERELOAD SERVER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ngulp.task('server', function livereloadServer() {\n    livereload.listen(); // listen for changes\n    return consoleTaskReport().pipe(p.nodemon({ // configure nodemon\n        script: 'build/bin/launcher.js', // the script to run the app\n        ext: 'js dust json css scss sass html htm png jpg gif hbs ejs rb xml jpeg avi mp3 mp4 mpg py txt env'\n\n    }).on('restart', function () {\n        livereload.listen();\n        return gulp.src('build/bin/launcher.js') // when the app restarts, run livereload.\n        .pipe(consoleTaskReport()).pipe(p.tap(function () {\n            console.log('\\n' + gutil.colors.white.bold.bgGreen('\\n' + '     .......... RELOADING PAGE, PLEASE WAIT ..........\\n'));\n        })).pipe(notify({ message: 'RELOADING PAGE, PLEASE WAIT', onLast: true })).pipe(wait(1500)).pipe(livereload());\n    }));\n});\n//#################################################################################\n\ngulp.task('build', ['sass', 'copy', 'js-build']);\n\ngulp.task('watch', function () {\n    gulp.watch([SRC + '**/*.*', path.join(__dirname, 'config/**/*.*')], function () {\n        return runSequence('makeRoutes', 'build');\n    });\n});\n\ngulp.task('default', function () {\n    runSequence('makeRoutes', 'build', 'watch');\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZGZhdWxrbmVyL1Byb2plY3RzL3Rlc3RiZWQvZXhwcmVzcy10ZXN0YmVkL2d1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7QUFHM0IsSUFBSSxJQUFJLEdBQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN6QixFQUFFLEdBQVEsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM3QixLQUFLLEdBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUMxQixLQUFLLEdBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMzQixDQUFDLEdBQVMsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMzQixHQUFHLEdBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4QixLQUFLLEdBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUUvQixPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7O0FBRzFCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzFCLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLFlBQVc7QUFDeEMsV0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDNUIsQ0FBQzs7O0FBR0YsSUFBSSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsNEJBQTRCLEVBQUUsV0FBVyxDQUFDOzs7QUFHOUUsSUFBSSxJQUFJLEVBQUUsSUFBSSxDQUFDOzs7QUFHZixJQUFJLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQzs7OztBQUkvQixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQ25DLGNBQWM7QUFDZCxPQUFPO0FBQ1AsT0FBTztBQUNQLEtBQUs7QUFDTCxjQUFjO0FBQ2QsTUFBTTtBQUNOLFNBQVM7QUFDVCxNQUFNO0FBQ04sUUFBUTtBQUNSLFNBQVM7QUFDVCxRQUFRO0FBQ1IsT0FBTztBQUNQLFlBQVk7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ZSI6Ii9ob21lL2FuZGZhdWxrbmVyL1Byb2plY3RzL3Rlc3RiZWQvZXhwcmVzcy10ZXN0YmVkL2d1bHBmaWxlLmJhYmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGd1bHAgPSByZXF1aXJlKCdndWxwJyk7XG5cbi8vTk9ERSBNT0RVTEVTICYgSlMgTElCUkFSSUVTXG52YXIgcGF0aCAgICA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgICBmcyAgICAgID0gcmVxdWlyZSgnZnMtZXh0cmEnKSxcbiAgICB5YXJncyAgID0gcmVxdWlyZSgneWFyZ3MnKSxcbiAgICBtZXJnZSAgID0gcmVxdWlyZSgnbWVyZ2UyJyksXG4gICAgXyAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpLFxuICAgIGRlbCAgICAgPSByZXF1aXJlKCdkZWwnKSxcbiAgICBhc3luYyAgID0gcmVxdWlyZSgnYXN5bmMnKTtcblxucmVxdWlyZSgnc2hlbGxqcy9nbG9iYWwnKTtcblxuLy9FQ01BIDYgUE9MWUZJTExcbnJlcXVpcmUoJ2JhYmVsL3JlZ2lzdGVyJyk7XG5PYmplY3QuZ2V0UHJvdG90eXBlT2YudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gT2JqZWN0LnRvU3RyaW5nKCk7XG59O1xuXG4vL1BJUEUgQ09NUE9ORU5UU1xudmFyIGNhdGNoRXJyb3JzLCBjb25zb2xlVGFza1JlcG9ydCwgbmV3ZXJUaGFuUm9vdElmTm90UHJvZHVjdGlvbiwgcm1EZWJ1Z0NvZGU7XG5cbi8vQ09NTUFORCBMSU5FIFBBUkFNIEhBTkRMSU5HXG52YXIgY21kcywgYXJncztcblxuLy9VVElMSVRZIEZVTkNUSU9OU1xudmFyIG9uRXJyb3IsIHJlc29sdmVTcmNBbmREZXN0O1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG4vL1BBQ0tBR0VEIEdVTFAgUExVR0lOUyAtLS0gQVZBSUxBQkxFIFZJQSAncC5uYW1lT2ZQYWNrYWdlJ1xudmFyIHAgPSByZXF1aXJlKCdndWxwLXBhY2thZ2VzJykoZ3VscCwgW1xuICAgICdhdXRvcHJlZml4ZXInLCAgICAgICAgICAgICAvLyBwcmVmaXggY3NzIGZvciBtdWx0aXBsZSBicm93c2Vyc1xuICAgICdiYWJlbCcsICAgICAgICAgICAgICAgICAgICAvLyBjb21waWxlIEVDTUE2IC0tPiBFQ01BNVxuICAgICdkZWJ1ZycsICAgICAgICAgICAgICAgICAgICAvLyBsaXN0cyBhbGwgZmlsZXMgcnVuIHRocnUgaXRcbiAgICAnZGV2JywgICAgICAgICAgICAgICAgICAgICAgLy8gVG9nZ2xlIGh0bWwgY29tbWVudHMgb24gJiBvZmZcbiAgICAnZGlzcGxheS1oZWxwJywgICAgICAgICAgICAgLy8gRGlzcGxheSBoZWxwIGZpbGVcbiAgICAnZHVzdCcsICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcGlsZSBEdXN0IHRlbXBsYXRlc1xuICAgICdleHByZXNzJywgICAgICAgICAgICAgICAgICAvLyBMYXVuY2ggZXhwcmVzcyBmcmFtZXdvcmtcbiAgICAnZXhpdCcsICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2UgcXVpdCBHdWxwIHByb2Nlc3NcbiAgICAnZmlsdGVyJywgICAgICAgICAgICAgICAgICAgLy8gRmlsdGVyIG91dCB1bndhbnRlZCBmaWxlcyBmcm9tIHN0cmVhbVxuICAgICdpZi1lbHNlJywgICAgICAgICAgICAgICAgICAvLyBpZi1lbHNlIHN0YXRlbWVudHMgbWlkLXN0cmVhbVxuICAgICdqc2hpbnQnLCAgICAgICAgICAgICAgICAgICAvLyBkaXNwbGF5IEphdmFzY3JpcHQgZXJyb3JzXG4gICAgJ25ld2VyJywgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgcHVzaCBpdGVtIHRocm91Z2ggcGlwZSBpZiBuZXdlclxuICAgICdsaXZlcmVsb2FkJywgICAgICAgICAgICAgICAvLyBSZWxhdW5jaCBpbiBicm93c2VyIGF1dG9tYXRpY2FsbHlcbiAgICAnbm9kZW1vbicsICAgICAgICAgICAgICAgICAgLy8gS2VlcCBzZXJ2ZXIgcnVubmluZyAtIHJlc3RhcnQgb24gY3Jhc2hcbiAgICAnbm90aWZ5JywgICAgICAgICAgICAgICAgICAgLy8gVGVsbHMgeW91IGlmIGEgcmVsb2FkIGhhcHBlbnNcbiAgICAncGx1bWJlcicsICAgICAgICAgICAgICAgICAgLy8ga2VlcCBydW5uaW5nIGlmIGVycm9yIG9jY3Vyc1xuICAgICdwcmludCcsICAgICAgICAgICAgICAgICAgICAvLyBvdXRwdXQgZXJyb3JzIHRvIGNvbnNvbGVcbiAgICAncmVuYW1lJywgICAgICAgICAgICAgICAgICAgLy8gUmVuYW1lIGZpbGVzXG4gICAgJ3JlcGxhY2UnLCAgICAgICAgICAgICAgICAgIC8vIGZpbmQtYW5kLXJlcGxhY2UgdGV4dCBpbiBmaWxlc1xuICAgICdyaW1yYWYnLCAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZmlsZXNcbiAgICAnc2FzcycsICAgICAgICAgICAgICAgICAgICAgLy8gY29tcGlsZSBzY3NzIGFuZCBzYXNzIC0tPiBjc3NcbiAgICAnc2hlbGwnLCAgICAgICAgICAgICAgICAgICAgLy8gcnVuIHNoZWxsIGNvbW1hbmRzIHdpdGggZ3VscFxuICAgICdzaXplJywgICAgICAgICAgICAgICAgICAgICAvLyBvdXRwdXQgZmlsZSBzaXplXG4gICAgJ3N0YXRzJywgICAgICAgICAgICAgICAgICAgIC8vIHByb3ZpZGVzIHN0YXRzIG9uIGZpbGVzIHBhc3NlZCB0aHJ1IHN0cmVhbVxuICAgICd0YXAnLCAgICAgICAgICAgICAgICAgICAgICAvLyBydW4gZnVuY3Rpb24gbWlkLXN0cmVhbVxuICAgICd3ZWJwYWNrJywgICAgICAgICAgICAgICAgICAvLyBjb21waWxlIHdlYnBhY2tcbl0pO1xuXG4vL1VOUEFDS0FHRUFCTEUgR1VMUCBQTFVHSU5TXG52YXIgZ3V0aWwgPSByZXF1aXJlKCdndWxwLXV0aWwnKTtcbnZhciBsYXp5cGlwZSA9IHJlcXVpcmUoJ2xhenlwaXBlJyk7XG52YXIgcnVuU2VxdWVuY2UgPSByZXF1aXJlKCdydW4tc2VxdWVuY2UnKTtcbnZhciBsaXZlcmVsb2FkID0gcmVxdWlyZSgnZ3VscC1saXZlcmVsb2FkJyk7XG52YXIgbm90aWZ5ID0gcmVxdWlyZSgnZ3VscC1ub3RpZnknKTtcbnZhciB3YWl0ID0gcmVxdWlyZSgnZ3VscC13YWl0Jyk7XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG5cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ09OU1RBTlRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vL1xudmFyIFBBVEhTID0gcmVxdWlyZSgnLi9jb25maWcvcHJvamVjdC1wYXRocy5qc29uJyk7XG52YXIgU1JDID0gcGF0aC5qb2luKF9fZGlybmFtZSwgUEFUSFMuc3JjZGlyKSxcbiAgICBERVNUID0gcGF0aC5qb2luKF9fZGlybmFtZSwgUEFUSFMuZGVzdGRpcik7XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy9cblxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLSBDT01NQU5EIExJTkUgUEFSQU1FVEVSIEhBTkRMSU5HIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG4vL0NvbW1hbmQgbGluZSBmbGFncyBhY2NlcHRlZCBieSBndWxwXG5jbWRzID0gWyd0ZXN0JywgJ3Byb2R1Y3Rpb24nLCAnc3RhdHMnLCAnb25jZSddO1xuXG4vKiogUG9wdWxhdGUgYXJncyBvYmplY3Qgdy8gY29tbWFuZCBsaW5lIGFyZ3MsIHNldHRpbmcgZWFjaCB0aGF0IHdhcyByZWNlaXZlZCB0b1xuICAqIHRydWUgaW4gdGhlIGFyZ3Mgb2JqZWN0LCAmIGFsbCBvdGhlcnMgdG8gZmFsc2UuIFJlZmVyZW5jZWQgYnkgYXJndW1lbnQgbmFtZS5cbiAgKiBAZXhhbXBsZSBhcmdzLnByb2R1Y3Rpb24gc2V0IHRvIHRydWUgaWYgZ3VscCBsYXVuY2hlZCB3LyBndWxwIC0tcHJvZHVjdGlvbi5cbiAgKi9cbmFyZ3MgPSAoZnVuY3Rpb24gcG9wdWxhdGVBcmdzKGFyZ0xpc3QsIGFyZ09iail7XG4gICAgYXJnTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIGNyZWF0ZUFyZ09iakZyb21BcmdBcnJheShhcmcpe1xuICAgICAgICBhcmdPYmpbYXJnXSA9ICh5YXJncy5hcmd2W2FyZ10gPT09IHRydWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhcmdPYmo7XG59KGNtZHMsIHt9KSk7XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG5cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gVVRJTElUSUVTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG4vKipcbiAqIE91dHB1dCB3ZWJwYWNrIGVycm9ycyB3aGVuIGNhdWdodC5cbiAqL1xub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgZ3V0aWwuYmVlcCgpO1xuICAgIGNvbnNvbGUubG9nKGd1dGlsLmNvbG9ycy5yZWQuYmdXaGl0ZSgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKSk7XG4gICAgY29uc29sZS5sb2coJ0VSUk9SIE9DQ1VSUkVEJyk7XG4gICAgY29uc29sZS5sb2codHlwZW9mIGVycik7XG4gICAgY29uc29sZS5sb2coZ3V0aWwuY29sb3JzLnJlZC5iZ1doaXRlKGVyci50b1N0cmluZygpKSk7XG4gICAgY29uc29sZS5sb2coZ3V0aWwuY29sb3JzLnJlZC5iZ1doaXRlKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpKTtcbiAgICB0aGlzLmVtaXQoJ3Jlc3RhcnQnKTtcbiAgICB0aGlzLmVtaXQoJ2VuZCcpO1xufTtcblxuXG4vKipcbiAqIEJhc2VkIG9uIGEgcmVsYXRpdmUgcGF0aCB0byByZXNvdXJjZSAob3IgcmVzb3VyY2VzKSwgZW1pdHMgYW4gb2JqZWN0XG4gKiBjb250YWluaW5nIHRoZSBmdWxsIGFic29sdXRlIHBhdGhzICgmIGdsb2IpIHRvIHRoZSBzb3VyY2UgZmlsZXMvZGlyc1xuICogKG91dE9iai5zcmMpICYgZGVzdGluYXRpb24gZGlyIChvdXRPYmouZGVzdCkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZQYXRoOiBmaWxlIG9yIGRpciBwYXRoLiBBc3N1bWVzIGRpciBpZiBpdCBlbmRzIHcgJy8nXG4gKiAgICAgICAgICAgcGF0aCBpcyByZWxhdGl2ZSB0byByb290IHNvdXJjZSAmIGJ1aWxkIHBhdGhzLiBGb3IgZGlycyxcbiAqICAgICAgICAgICB2YWx1ZXMgbGlrZSBcImJpbi9cIiBvciBcInB1YmxpYy9pbWFnZXMvXCIgZXhwZWN0ZWQ7IGZvciBmaWxlc1xuICogICAgICAgICAgIHZhbHVlcyBsaWtlIFwiYXBwLmpzXCIgb3IgXCJwdWJsaWMvZmF2aWNvbi5pY29cIiBleHBlY3RlZC5cbiAqIEByZXR1cm4ge09iamVjdDxTdHJpbmcsU3RyaW5nPn0gcHJvcGVydHkgJ3NyYycgaG9sZHMgcGF0aCB0byBzb3VyY2VcbiAqICAgICAgICAgZGlyIG9yIGZpbGU7IHByb3BlcnR5IGRlc3QgY29udGFpbnMgcGF0aCB0byBkZXN0aW5hdGlvbiBkaXJcbiAqL1xucmVzb2x2ZVNyY0FuZERlc3QgPSBmdW5jdGlvbiByZXNvbHZlU3JjQW5kRGVzdChmUGF0aCwgb3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gICAgLy9IYW5kbGVzIHBhcmFtIHBvaW50aW5nIHRvIGEgZGlyZWN0b3J5XG4gICAgaWYgKF8ubGFzdChmUGF0aC5zcGxpdCgnJykpID09PSAnLycpIHtcbiAgICAgICAgcmV0dXJuKHtcbiAgICAgICAgICAgIHNyYzogcGF0aC5qb2luKFNSQywgZlBhdGgpICsgJyoqLyouJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoKCEhb3B0cy5leHQpID8gb3B0cy5leHQgOiAnKicpLFxuICAgICAgICAgICAgZGVzdDogcGF0aC5qb2luKERFU1QsIGZQYXRoKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL0hhbmRsZXMgcGFyYW0gcG9pbnRpbmcgdG8gYSBmaWxlXG4gICAgbGV0IGRlc3RkaXIgPSBmUGF0aC5tYXRjaCgvW2EtekEtelxcL10rKD89XFwvKVxcLy9taWcpO1xuICAgIHJldHVybiAoe1xuICAgICAgICBzcmM6IHBhdGguam9pbihTUkMsIGZQYXRoKSxcbiAgICAgICAgZGVzdDogKF8uaXNBcnJheShkZXN0ZGlyKSkgPyBwYXRoLmpvaW4oREVTVCwgZGVzdGRpci5qb2luKCcnKSkgOiBERVNUXG4gICAgfSk7XG59O1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG5cblxuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyN+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4gUkVVU0FCTEUgUElQRSBDT01QT05FTlRTIH5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+XG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5jYXRjaEVycm9ycyA9IGxhenlwaXBlKClcbiAgICAucGlwZShwLnBsdW1iZXIsIHsgZXJyb3JIYW5kbGVyOiBvbkVycm9yIH0pO1xuXG5jb25zb2xlVGFza1JlcG9ydCA9IGxhenlwaXBlKClcbiAgICAucGlwZShjYXRjaEVycm9ycylcbiAgICAucGlwZShwLnByaW50KTtcblxubmV3ZXJUaGFuUm9vdElmTm90UHJvZHVjdGlvbiA9IGxhenlwaXBlKClcbiAgICAucGlwZShwLmlmRWxzZSwgIWFyZ3MucHJvZHVjdGlvbiwgcC5uZXdlci5iaW5kKHRoaXMsIERFU1QpKTtcblxuXG4vL1xuLy8gTGlnaHR3ZWlnaHQgdGVtcGxhdGVzIGZvciByZW1vdmluZyBkZWJ1ZyBjb2RlIHdoZW4gcHJvZHVjdGlvbiBmbGFnIHNldFxuLy9cbi8vIFJlbW92ZXMgc2luZ2xlLWxpbmUgc2VjdGlvbnMgb2YgamF2YXNjcmlwdCBib29rZW5kZWQgYnk6IC8qPCUqLyAgYW5kICAvKiU+Ki9cbi8vIEUuZy4gIC8qPCUqLyBjb25zb2xlLmxvZyhcInRoaXMgbGluZSBvZiBKUyBnZXRzIHJlbW92ZWRcIik7IC8qJT4qL1xuLy8gUmVtb3ZlcyBtdWx0aWxpbmUganMgYmxvY2tzIGJvb2tlbmRlZCBieTogLyo8e3tERUJVRyovICBhbmQgIC8qREVCVUd9fT4qL1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5PUjogLyo8e3tURVNUKi8gICBhbmQgICAvKlRFU1R9fT4qL1xuLy9cbnJtRGVidWdDb2RlID0gbGF6eXBpcGUoKVxuICAgIC5waXBlKHAuaWZFbHNlLCAhIWFyZ3MucHJvZHVjdGlvbiwgcC5yZXBsYWNlLmJpbmQodGhpcyxcbiAgICAgICAgL1xcL1xcKjxcXCUuKlxcJVxcPlxcKlxcLy9nLCAnJykpXG4gICAgLnBpcGUocC5pZkVsc2UsICEhYXJncy5wcm9kdWN0aW9uLCBwLnJlcGxhY2UuYmluZCh0aGlzLFxuICAgICAgICAvXFwvXFwqPFxce1xce0RFQlVHXFwqXFwvW1xcc1xcU10qP1xcL1xcKkRFQlVHXFx9XFx9XFw+XFwqXFwvL2dtLCAnJykpXG4gICAgLnBpcGUocC5pZkVsc2UsICEhYXJncy5wcm9kdWN0aW9uLCBwLnJlcGxhY2UuYmluZCh0aGlzLFxuICAgICAgICAvXFwvXFwqPFxce1xce1RFU1RcXCpcXC9bXFxzXFxTXSo/XFwvXFwqVEVTVFxcfVxcfVxcPlxcKlxcLy9nbSwgJycpKTtcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cblxuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyN+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4gU1RZTEVTICB+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+XG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vKipcbiAqIENvbXBpbGUgU0NTUyB0byBDU1MsIG91dHB1dCB0byBidWlsZCBkaXJlY3RvcnkuXG4gKi9cbmd1bHAudGFzaygnc2FzcycsIGZ1bmN0aW9uIHNhc3MoKSB7XG4gICAgbGV0IGZpbGVQYXRocyA9IHJlc29sdmVTcmNBbmREZXN0KFBBVEhTLnNjc3MsIHsgZXh0OiAnc2FzcycgfSk7XG5cbiAgICByZXR1cm4gZ3VscC5zcmMoZmlsZVBhdGhzLnNyYylcbiAgICAgICAgLnBpcGUoY29uc29sZVRhc2tSZXBvcnQoKSlcbiAgICAgICAgLnBpcGUocC5zYXNzKHtlcnJMb2dUb0NvbnNvbGU6IHRydWV9KSlcbiAgICAgICAgLnBpcGUocC5pZkVsc2UoICEhYXJncy5zdGF0cywgcC5zaXplICkpXG4gICAgICAgIC5waXBlKGd1bHAuZGVzdChmaWxlUGF0aHMuZGVzdCkpO1xufSk7XG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG5cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8jfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4gSlMgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLyoqXG4gKiBUcmFuc3BpbGVzIGFsbCBqcyBmaWxlcyBpbiBzb3VyY2UgZGlyZWN0b3J5ICgvc3JjKSBmcm9tIEVDTUE2IHRvIEVDTUE1LFxuICogb3V0cHV0cyByZXN1bHRhbnQganMgZmlsZXMgaW50byBidWlsZCBkaXJlY3RvcnkgKC9idWlsZCkuXG4gKi9cbmd1bHAudGFzaygnanMtYnVpbGQnLCAoKSA9PlxuICAgIGNvbnNvbGVUYXNrUmVwb3J0KCkucGlwZShtZXJnZShQQVRIUy5qcy5tYXAoIChmaWxlcykgPT4ge1xuICAgICAgICBsZXQgZmlsZVBhdGhzID0gcmVzb2x2ZVNyY0FuZERlc3QoZmlsZXMsIHsgZXh0OiAnanMnIH0pO1xuXG4gICAgICAgIHJldHVybiBndWxwLnNyYyhmaWxlUGF0aHMuc3JjKVxuICAgICAgICAgICAgLnBpcGUocC5maWx0ZXIoWycqJywgJyEqKi8qLnN3cCcsICchKiovKi4qfiddKSlcbiAgICAgICAgICAgIC5waXBlKGNvbnNvbGVUYXNrUmVwb3J0KCkpXG4gICAgICAgICAgICAucGlwZShwLmJhYmVsKHsgY29tcGFjdDogZmFsc2UgfSkpXG4gICAgICAgICAgICAgICAgLm9uKCdlcnJvcicsIG9uRXJyb3IpXG4gICAgICAgICAgICAucGlwZShwLmRldignZ290IGludG8ganMtYnVpbGQgZW5kIScpKVxuICAgICAgICAgICAgLnBpcGUoZ3VscC5kZXN0KGZpbGVQYXRocy5kZXN0KSk7XG5cbiAgICB9KSkpLm9uKCdlcnJvcicsIG9uRXJyb3IpKTtcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cblxuLyoqXG4gKiBSZW1vdmUgYWxsIGZpbGVzIGZyb20gYnVpbGQgZm9sZGVyXG4gKi9cbmd1bHAudGFzayggJ2NsZWFudXAnLCAoKG5leHQpID0+IGRlbChbJ2J1aWxkLyoqLyonXSwgbmV4dCkpICk7XG5cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8jfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4gU1RBVElDIEFTU0VUUyB+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLyoqXG4gKiBDb3BpZXMgc3RhdGljIGFzc2V0cyBmcm9tIHNvdXJjZSBkaXJlY3RvcnkgaW50byBidWlsZCBkaXJlY3RvcnkuXG4gKi9cbmd1bHAudGFzaygnY29weScsIGZ1bmN0aW9uIGNvcHkoKXtcbiAgICByZXR1cm4gbWVyZ2UoUEFUSFMuc3RhdGljLm1hcChmdW5jdGlvbihmaWxlcyl7XG4gICAgICAgIGxldCBmaWxlUGF0aHMgPSByZXNvbHZlU3JjQW5kRGVzdChmaWxlcyk7XG5cbiAgICAgICAgLy9BY3R1YWxseSBvdXRwdXQgdGhlIGZpbGVzXG4gICAgICAgIHJldHVybiBndWxwLnNyYyhmaWxlUGF0aHMuc3JjKVxuICAgICAgICAgICAgLnBpcGUocC5maWx0ZXIoWycqJywgJyEqKi8qLnN3cCcsICchKiovKi4qfiddKSlcbiAgICAgICAgICAgIC5waXBlKGNvbnNvbGVUYXNrUmVwb3J0KCkpXG4gICAgICAgICAgICAucGlwZShwLmRlYnVnKHt0aXRsZTogJ2NvcHkgc3RhdGljIGFzc2V0czonfSkpXG4gICAgICAgICAgICAucGlwZShwLmlmRWxzZSggISFhcmdzLnN0YXRzLCBwLnNpemUgKSlcbiAgICAgICAgICAgIC5waXBlKGd1bHAuZGVzdChmaWxlUGF0aHMuZGVzdCkpO1xuICAgIH0pKTtcbn0pO1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuXG5mdW5jdGlvbiBmaWxlRXhpc3RzKGZpbGVQYXRoLCBjYWxsYmFjayl7XG4gICAgZnMuc3RhdChmaWxlUGF0aCwgKGVyciwgc3RhdHMpID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHN0YXRzLmlzRmlsZSgpKTtcbiAgICB9KTtcbn1cblxuXG4vKipcbiAqIEVhY2ggZmlsZVxuICogQHBhcmFtICB7U3RyaW5nfSAgZmlsZVBhdGggICAgIHBhdGggb2YgZmlsZSB0byBjaGVjayBleGlzdGVuY2Ugb2ZcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGlzSlNDb25maWcgICBpZiB0cnVlLCB3aWxsIGNoZWNrIGZvciAuanMgJiAuanNvbiBvZiBmaWxlUGF0aFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmaWxlUGF0aCBzaG91bGQgaGF2ZSBubyBleHQgaW4gdGhpcyBjYXNlKSwgJlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgbWFrZSBuZXcgZmlsZSBpZiBuZWl0aGVyIGV4aXN0LlxuICogQHBhcmFtICB7U3RyaW5nfSAgZGVmYXVsdERhdGEgIGRhdGEgdG8gd3JpdGUgaW50byB0aGUgZmlsZVxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBtYWtlRGVmYXVsdEZpbGVzKGZpbGVQYXRoLCBpc0pTQ29uZmlnLCBkZWZhdWx0RGF0YSl7XG4gICAgaWYgKGlzSlNDb25maWcpIHtcblxuICAgICAgICBhc3luYy5zb21lKFtmaWxlUGF0aCArICcuanMnLCBmaWxlUGF0aCArICcuanNvbiddLCBmaWxlRXhpc3RzLCBmdW5jdGlvbihyZXN1bHQpe1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSByZXR1cm47XG4gICAgICAgICAgICByZXR1cm4gZnMud3JpdGVGaWxlKGZpbGVQYXRoICsgJy5qc29uJywgZGVmYXVsdERhdGEsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmxvZygnX19fX19fX29wZW5Pck1ha2U6OiBFUlJPUiBpbiBmcy53cml0ZUZpbGUgb24gJyArIGZpbGVQYXRoICsgJy5qc29uLiBFcnJvcjogJyArIGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdtYWtlRGVmYXVsdEZpbGVzOjogbmV3JyArIGZpbGVQYXRoICsgJy5qc29uIGZpbGUgd3JpdHRlbiEnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIC8vaWYgbm90IGpzL2pzb24gZmlsZVxuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgZmlsZUV4aXN0cyhmaWxlUGF0aCwgZnVuY3Rpb24oZG9lc0V4aXN0KXtcbiAgICAgICAgICAgIGlmIChkb2VzRXhpc3QgPT09IHRydWUpIHJldHVybjtcbiAgICAgICAgICAgIHJldHVybiBmcy53cml0ZUZpbGUoZmlsZVBhdGgsIGRlZmF1bHREYXRhLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS5sb2coJ2ZzLndyaXRlRmlsZSBFUlJPUjogJyArIGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ2ZzLndyaXRlRmlsZSBzdWNjZXNzIGZvciAnICsgZmlsZVBhdGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuXG5cblxuXG5cbi8vKioqKioqKioqKioqKioqKiogQ1JFQVRFIEZJTEVTIElGIFRIRVkgRE9OJ1QgRVhJU1QgQkFTRUQgT04gQ09ORklHIENPTlRFTlRTICoqKioqKioqKioqKioqKioqLy9cbmd1bHAudGFzaygnbWFrZVJvdXRlcycsIGZ1bmN0aW9uIG1ha2VSb3V0ZXMoKXtcblxuICAgIHZhciByb3V0ZXMgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsICdjb25maWcvcm91dGVzLmpzb24nKSk7XG4gICAgdmFyIGRlZkpTT04gPSAne1wiZGVmYXVsdFwiOlwiZGVmYXVsdFwifSc7IC8vZGVmIGNvbnRlbnRzIHRvIHdyaXRlIGlmIG5vIGZpbGVcblxuICAgIGZzLnJlYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICdjb25maWcvZGVmYXVsdF92aWV3X3RlbXBsYXRlLmR1c3QnKSwgZnVuY3Rpb24oZXJyLCBkdXN0RGF0YSkge1xuICAgICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XG5cbiAgICAgICAgZnMucmVhZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2NvbmZpZy9kZWZhdWx0X2Zyb250ZW5kX2pzX2ZpbGUuanMnKSwgZnVuY3Rpb24oZXJyLCBjbGllbnRKU0RhdGEpIHtcblxuICAgICAgICAgICAgcm91dGVzLmZvckVhY2goZnVuY3Rpb24ocm91dGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSAocm91dGUuZmlsZSB8fCByb3V0ZS5yZXF1ZXN0X3BhdGgpO1xuICAgICAgICAgICAgICAgIHZhciB0cGxEYXRhUGF0aE5vRXh0ID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3NyYy90ZW1wbGF0ZS1kYXRhJywgZm4gKyAnX3RwbGRhdGEnKSxcbiAgICAgICAgICAgICAgICAgICAgdHBsVmlld1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnc3JjL3ZpZXdzJywgZm4gKyAnX3ZpZXcuZHVzdCcpLFxuICAgICAgICAgICAgICAgICAgICBmcm9udGVuZEpTUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdzcmMvcHVibGljL2phdmFzY3JpcHRzJywgZm4gKyAnX2Zyb250ZW5kLmpzJyk7XG5cbiAgICAgICAgICAgICAgICBtYWtlRGVmYXVsdEZpbGVzKCB0cGxEYXRhUGF0aE5vRXh0LCB0cnVlLCBkZWZKU09OICk7XG4gICAgICAgICAgICAgICAgbWFrZURlZmF1bHRGaWxlcyggdHBsVmlld1BhdGgsIGZhbHNlLCBkdXN0RGF0YSApO1xuICAgICAgICAgICAgICAgIG1ha2VEZWZhdWx0RmlsZXMoIGZyb250ZW5kSlNQYXRoLCBmYWxzZSwgXy50ZW1wbGF0ZShjbGllbnRKU0RhdGEpKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByb3V0ZU5hbWVDQzogXy5jYW1lbENhc2UoZm4pLCByb3V0ZU5hbWU6IGZuIH1cbiAgICAgICAgICAgICAgICApICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ3Bhc3QgZm9yRWFjaCcpO1xuXG59KTtcbiAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLy9cblxuXG5cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8jfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+IExJVkVSRUxPQUQgU0VSVkVSIH5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuZ3VscC50YXNrKCdzZXJ2ZXInLCBmdW5jdGlvbiBsaXZlcmVsb2FkU2VydmVyKCl7XG4gICAgbGl2ZXJlbG9hZC5saXN0ZW4oKTsgICAgICAgICAgICAgICAgICAgIC8vIGxpc3RlbiBmb3IgY2hhbmdlc1xuICAgIHJldHVybiBjb25zb2xlVGFza1JlcG9ydCgpXG4gICAgICAgIC5waXBlKHAubm9kZW1vbih7ICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25maWd1cmUgbm9kZW1vblxuICAgICAgICAgICAgc2NyaXB0OiAnYnVpbGQvYmluL2xhdW5jaGVyLmpzJywgICAgLy8gdGhlIHNjcmlwdCB0byBydW4gdGhlIGFwcFxuICAgICAgICAgICAgZXh0OiAnanMgZHVzdCBqc29uIGNzcyBzY3NzIHNhc3MgaHRtbCBodG0gcG5nIGpwZyBnaWYgaGJzIGVqcyByYiB4bWwganBlZyBhdmkgbXAzIG1wNCBtcGcgcHkgdHh0IGVudidcblxuICAgICAgICB9KS5vbigncmVzdGFydCcsICgpID0+IHtcbiAgICAgICAgICAgbGl2ZXJlbG9hZC5saXN0ZW4oKTtcbiAgICAgICAgICAgcmV0dXJuIGd1bHAuc3JjKCdidWlsZC9iaW4vbGF1bmNoZXIuanMnKSAgIC8vIHdoZW4gdGhlIGFwcCByZXN0YXJ0cywgcnVuIGxpdmVyZWxvYWQuXG4gICAgICAgICAgICAgICAgLnBpcGUoY29uc29sZVRhc2tSZXBvcnQoKSlcbiAgICAgICAgICAgICAgICAucGlwZShwLnRhcCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcXG4nICsgZ3V0aWwuY29sb3JzLndoaXRlLmJvbGQuYmdHcmVlbignXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICcgICAgIC4uLi4uLi4uLi4gUkVMT0FESU5HIFBBR0UsIFBMRUFTRSBXQUlUIC4uLi4uLi4uLi5cXG4nKSk7XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLnBpcGUobm90aWZ5KHttZXNzYWdlOiAnUkVMT0FESU5HIFBBR0UsIFBMRUFTRSBXQUlUJywgb25MYXN0OiB0cnVlfSkpXG4gICAgICAgICAgICAgICAgLnBpcGUod2FpdCgxNTAwKSlcbiAgICAgICAgICAgICAgICAucGlwZShsaXZlcmVsb2FkKCkpO1xuICAgICAgICB9KSk7XG5cbiAgICB9KTtcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbmd1bHAudGFzaygnYnVpbGQnLCBbJ3Nhc3MnLCAnY29weScsICdqcy1idWlsZCddICk7XG5cbmd1bHAudGFzaygnd2F0Y2gnLCBmdW5jdGlvbigpe1xuICAgIGd1bHAud2F0Y2goW1NSQyArICcqKi8qLionLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAnY29uZmlnLyoqLyouKicpXSwgKCkgPT5cbiAgICAgICAgcnVuU2VxdWVuY2UoJ21ha2VSb3V0ZXMnLCAnYnVpbGQnKSk7XG59KTtcblxuZ3VscC50YXNrKCdkZWZhdWx0JywgKCkgPT4geyBydW5TZXF1ZW5jZSgnbWFrZVJvdXRlcycsICdidWlsZCcsICd3YXRjaCcpOyB9KTtcbiJdfQ==",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "/home/andfaulkner/Projects/testbed/express-testbed/gulpfile.babel.js"
      ],
      "names": [],
      "mappings": ";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;;AAG3B,IAAI,IAAI,GAAM,OAAO,CAAC,MAAM,CAAC;IACzB,EAAE,GAAQ,OAAO,CAAC,UAAU,CAAC;IAC7B,KAAK,GAAK,OAAO,CAAC,OAAO,CAAC;IAC1B,KAAK,GAAK,OAAO,CAAC,QAAQ,CAAC;IAC3B,CAAC,GAAS,OAAO,CAAC,QAAQ,CAAC;IAC3B,GAAG,GAAO,OAAO,CAAC,KAAK,CAAC;IACxB,KAAK,GAAK,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE/B,OAAO,CAAC,gBAAgB,CAAC,CAAC;;;AAG1B,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1B,MAAM,CAAC,cAAc,CAAC,QAAQ,GAAG,YAAW;AACxC,WAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;CAC5B,CAAC;;;AAGF,IAAI,WAAW,EAAE,iBAAiB,EAAE,4BAA4B,EAAE,WAAW,CAAC;;;AAG9E,IAAI,IAAI,EAAE,IAAI,CAAC;;;AAGf,IAAI,OAAO,EAAE,iBAAiB,CAAC;;;;AAI/B,IAAI,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,EAAE,CACnC,cAAc;AACd,OAAO;AACP,OAAO;AACP,KAAK;AACL,cAAc;AACd,MAAM;AACN,SAAS;AACT,MAAM;AACN,QAAQ;AACR,SAAS;AACT,QAAQ;AACR,OAAO;AACP,YAAY;AACZ,SAAS;AACT,QAAQ;AACR,SAAS;AACT,OAAO;AACP,QAAQ;AACR,SAAS;AACT,QAAQ;AACR,MAAM;AACN,OAAO;AACP,MAAM;AACN,OAAO;AACP,KAAK;AACL,SAAS,CACZ,CAAC,CAAC;;;;AAGH,IAAI,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACjC,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC1C,IAAI,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC5C,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACpC,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;;;AAKhC,IAAI,KAAK,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC;AACnD,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC;IACxC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;;;;;AAM/C,IAAI,GAAG,CAAC,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;;;;;;AAM/C,IAAI,GAAI,CAAA,SAAS,YAAY,CAAC,OAAO,EAAE,MAAM,EAAC;AAC1C,WAAO,CAAC,OAAO,CAAC,SAAS,wBAAwB,CAAC,GAAG,EAAC;AAClD,cAAM,CAAC,GAAG,CAAC,GAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,AAAC,CAAC;KAC5C,CAAC,CAAC;AACH,WAAO,MAAM,CAAC;CACjB,CAAA,CAAC,IAAI,EAAE,EAAE,CAAC,AAAC,CAAC;;;;;;;AAQb,OAAO,GAAG,SAAS,OAAO,CAAC,GAAG,EAAE;AAC5B,SAAK,CAAC,IAAI,EAAE,CAAC;AACb,WAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC,CAAC;AAC7E,WAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAC9B,WAAO,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC;AACxB,WAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AACtD,WAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC,CAAC;AAC7E,QAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACrB,QAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACpB,CAAC;;;;;;;;;;;;;;AAeF,iBAAiB,GAAG,SAAS,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAE;AACxD,QAAI,GAAG,IAAI,IAAI,EAAE,CAAC;;;AAGlB,QAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;AACjC,eAAO;AACH,eAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,OAAO,IACpB,AAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA,AAAC;AAC9C,gBAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;SAC/B,CAAE;KACN;;;AAGD,QAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;AACpD,WAAQ;AACJ,WAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC;AAC1B,YAAI,EAAE,AAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI;KACxE,CAAE;CACN,CAAC;;;;;;AAQF,WAAW,GAAG,QAAQ,EAAE,CACnB,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC;;AAEhD,iBAAiB,GAAG,QAAQ,EAAE,CACzB,IAAI,CAAC,WAAW,CAAC,CACjB,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;;AAEnB,4BAA4B,GAAG,QAAQ,EAAE,CACpC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,YAAO,IAAI,CAAC,CAAC,CAAC;;;;;;;;;;AAWhE,WAAW,GAAG,QAAQ,EAAE,CACnB,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,YAC7C,oBAAoB,EAAE,EAAE,CAAC,CAAC,CAC7B,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,YAC7C,iDAAiD,EAAE,EAAE,CAAC,CAAC,CAC1D,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,YAC7C,+CAA+C,EAAE,EAAE,CAAC,CAAC,CAAC;;;;;;;;;AAW9D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,GAAG;AAC9B,QAAI,SAAS,GAAG,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;;AAE/D,WAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CACzB,IAAI,CAAC,iBAAiB,EAAE,CAAC,CACzB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC,CAAC,CACrC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAE,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;CACxC,CAAC,CAAC;;;;;;;;;;AAYH,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;WAClB,iBAAiB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAE,UAAC,KAAK,EAAK;AACpD,YAAI,SAAS,GAAG,iBAAiB,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;;AAExD,eAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CACzB,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,CAC9C,IAAI,CAAC,iBAAiB,EAAE,CAAC,CACzB,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAC7B,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CACxB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CACrC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KAExC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;CAAA,CAAC,CAAC;;;;;;AAO/B,IAAI,CAAC,IAAI,CAAE,SAAS,EAAG,UAAC,IAAI;WAAK,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC;CAAA,CAAG,CAAC;;;;;;;;AAS9D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,GAAE;AAC7B,WAAO,KAAK,CAAC,KAAK,UAAO,CAAC,GAAG,CAAC,UAAS,KAAK,EAAC;AACzC,YAAI,SAAS,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;;;AAGzC,eAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CACzB,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,CAC9C,IAAI,CAAC,iBAAiB,EAAE,CAAC,CACzB,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,qBAAqB,EAAC,CAAC,CAAC,CAC7C,IAAI,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAE,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACxC,CAAC,CAAC,CAAC;CACP,CAAC,CAAC;;;AAIH,SAAS,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAC;AACnC,MAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,KAAK,EAAK;AAC9B,YAAI,GAAG,EAAE,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChC,eAAO,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;KACnC,CAAC,CAAC;CACN;;;;;;;;;;;AAYD,SAAS,gBAAgB,CAAC,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAC;AACxD,QAAI,UAAU,EAAE;;AAEZ,aAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,GAAG,KAAK,EAAE,QAAQ,GAAG,OAAO,CAAC,EAAE,UAAU,EAAE,UAAS,MAAM,EAAC;;AAE3E,gBAAI,MAAM,KAAK,IAAI,EAAE,OAAO;AAC5B,mBAAO,EAAE,CAAC,SAAS,CAAC,QAAQ,GAAG,OAAO,EAAE,WAAW,EAAE,UAAS,GAAG,EAAE;AAC/D,oBAAI,GAAG,EAAE,OAAO,OAAO,CAAC,GAAG,CAAC,+CAA+C,GAAG,QAAQ,GAAG,gBAAgB,GAAG,GAAG,CAAC,CAAC;AACjH,uBAAO,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,QAAQ,GAAG,qBAAqB,CAAC,CAAC;aACnF,CAAC,CAAC;SACN,CAAC,CAAC;;;KAGN,MAAM;;AAEH,sBAAU,CAAC,QAAQ,EAAE,UAAS,SAAS,EAAC;AACpC,oBAAI,SAAS,KAAK,IAAI,EAAE,OAAO;AAC/B,uBAAO,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAS,GAAG,EAAE;AACrD,wBAAI,GAAG,EAAE,OAAO,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,QAAQ,CAAC,CAAC;AAC/D,2BAAO,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAG,QAAQ,CAAC,CAAC;iBAC9D,CAAC,CAAC;aACN,CAAC,CAAC;SACN;CAEJ;;;AAOD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,UAAU,GAAE;;AAEzC,QAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC,CAAC;AACjE,QAAI,OAAO,GAAG,uBAAuB,CAAC;;AAEtC,MAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mCAAmC,CAAC,EAAE,UAAS,GAAG,EAAE,QAAQ,EAAE;AAC3F,YAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;AAEnB,UAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oCAAoC,CAAC,EAAE,UAAS,GAAG,EAAE,YAAY,EAAE;;AAEhG,kBAAM,CAAC,OAAO,CAAC,UAAS,KAAK,EAAE;AAC3B,oBAAI,EAAE,GAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,YAAY,AAAC,CAAC;AAC5C,oBAAI,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,EAAE,EAAE,GAAG,UAAU,CAAC;oBAC7E,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,EAAE,GAAG,YAAY,CAAC;oBAClE,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,EAAE,EAAE,GAAG,cAAc,CAAC,CAAC;;AAEzF,gCAAgB,CAAE,gBAAgB,EAAE,IAAI,EAAE,OAAO,CAAE,CAAC;AACpD,gCAAgB,CAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,CAAE,CAAC;AACjD,gCAAgB,CAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CACnD,EAAE,WAAW,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAC5D,CAAE,CAAC;aACP,CAAC,CAAC;SAEN,CAAC,CAAC;KAEN,CAAC,CAAC;;AAEH,WAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;CAE/B,CAAC,CAAC;;;;;;AASH,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,gBAAgB,GAAE;AAC3C,cAAU,CAAC,MAAM,EAAE,CAAC;AACpB,WAAO,iBAAiB,EAAE,CACrB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC;AACZ,cAAM,EAAE,uBAAuB;AAC/B,WAAG,EAAE,gGAAgG;;KAExG,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,YAAM;AACpB,kBAAU,CAAC,MAAM,EAAE,CAAC;AACpB,eAAO,IAAI,CAAC,GAAG,CAAC,uBAAuB,CAAC;SAClC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CACzB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,YAAM;AACd,mBAAO,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GACvD,0DAA0D,CAAC,CAAC,CAAC;SAChE,CAAC,CAAC,CACF,IAAI,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,6BAA6B,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CACpE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAChB,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KAC3B,CAAC,CAAC,CAAC;CAEP,CAAC,CAAC;;;AAGP,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAE,CAAC;;AAElD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAU;AACzB,QAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC,EAAE;eAChE,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC;KAAA,CAAC,CAAC;CAC3C,CAAC,CAAC;;AAEH,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAM;AAAE,eAAW,CAAC,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;CAAE,CAAC,CAAC",
      "file": "/home/andfaulkner/Projects/testbed/express-testbed/gulpfile.babel.js",
      "sourcesContent": [
        "var gulp = require('gulp');\n\n//NODE MODULES & JS LIBRARIES\nvar path    = require('path'),\n    fs      = require('fs-extra'),\n    yargs   = require('yargs'),\n    merge   = require('merge2'),\n    _       = require('lodash'),\n    del     = require('del'),\n    async   = require('async');\n\nrequire('shelljs/global');\n\n//ECMA 6 POLYFILL\nrequire('babel/register');\nObject.getPrototypeOf.toString = function() {\n    return Object.toString();\n};\n\n//PIPE COMPONENTS\nvar catchErrors, consoleTaskReport, newerThanRootIfNotProduction, rmDebugCode;\n\n//COMMAND LINE PARAM HANDLING\nvar cmds, args;\n\n//UTILITY FUNCTIONS\nvar onError, resolveSrcAndDest;\n\n//------------------------------- PLUGINS --------------------------------//\n//PACKAGED GULP PLUGINS --- AVAILABLE VIA 'p.nameOfPackage'\nvar p = require('gulp-packages')(gulp, [\n    'autoprefixer',             // prefix css for multiple browsers\n    'babel',                    // compile ECMA6 --> ECMA5\n    'debug',                    // lists all files run thru it\n    'dev',                      // Toggle html comments on & off\n    'display-help',             // Display help file\n    'dust',                     // Compile Dust templates\n    'express',                  // Launch express framework\n    'exit',                     // Force quit Gulp process\n    'filter',                   // Filter out unwanted files from stream\n    'if-else',                  // if-else statements mid-stream\n    'jshint',                   // display Javascript errors\n    'newer',                    // Only push item through pipe if newer\n    'livereload',               // Relaunch in browser automatically\n    'nodemon',                  // Keep server running - restart on crash\n    'notify',                   // Tells you if a reload happens\n    'plumber',                  // keep running if error occurs\n    'print',                    // output errors to console\n    'rename',                   // Rename files\n    'replace',                  // find-and-replace text in files\n    'rimraf',                   // remove files\n    'sass',                     // compile scss and sass --> css\n    'shell',                    // run shell commands with gulp\n    'size',                     // output file size\n    'stats',                    // provides stats on files passed thru stream\n    'tap',                      // run function mid-stream\n    'webpack',                  // compile webpack\n]);\n\n//UNPACKAGEABLE GULP PLUGINS\nvar gutil = require('gulp-util');\nvar lazypipe = require('lazypipe');\nvar runSequence = require('run-sequence');\nvar livereload = require('gulp-livereload');\nvar notify = require('gulp-notify');\nvar wait = require('gulp-wait');\n//------------------------------------------------------------------------//\n\n\n//------------------------------ CONSTANTS -------------------------------//\nvar PATHS = require('./config/project-paths.json');\nvar SRC = path.join(__dirname, PATHS.srcdir),\n    DEST = path.join(__dirname, PATHS.destdir);\n//-----------------------------------------------------------------------//\n\n\n//------------------ COMMAND LINE PARAMETER HANDLING ---------------------//\n//Command line flags accepted by gulp\ncmds = ['test', 'production', 'stats', 'once'];\n\n/** Populate args object w/ command line args, setting each that was received to\n  * true in the args object, & all others to false. Referenced by argument name.\n  * @example args.production set to true if gulp launched w/ gulp --production.\n  */\nargs = (function populateArgs(argList, argObj){\n    argList.forEach(function createArgObjFromArgArray(arg){\n        argObj[arg] = (yargs.argv[arg] === true);\n    });\n    return argObj;\n}(cmds, {}));\n//------------------------------------------------------------------------//\n\n\n//------------------------------ UTILITIES ------------------------------//\n/**\n * Output webpack errors when caught.\n */\nonError = function onError(err) {\n    gutil.beep();\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    console.log('ERROR OCCURRED');\n    console.log(typeof err);\n    console.log(gutil.colors.red.bgWhite(err.toString()));\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    this.emit('restart');\n    this.emit('end');\n};\n\n\n/**\n * Based on a relative path to resource (or resources), emits an object\n * containing the full absolute paths (& glob) to the source files/dirs\n * (outObj.src) & destination dir (outObj.dest).\n *\n * @param {String} fPath: file or dir path. Assumes dir if it ends w '/'\n *           path is relative to root source & build paths. For dirs,\n *           values like \"bin/\" or \"public/images/\" expected; for files\n *           values like \"app.js\" or \"public/favicon.ico\" expected.\n * @return {Object<String,String>} property 'src' holds path to source\n *         dir or file; property dest contains path to destination dir\n */\nresolveSrcAndDest = function resolveSrcAndDest(fPath, opts) {\n    opts = opts || {};\n\n    //Handles param pointing to a directory\n    if (_.last(fPath.split('')) === '/') {\n        return({\n            src: path.join(SRC, fPath) + '**/*.' +\n                           ((!!opts.ext) ? opts.ext : '*'),\n            dest: path.join(DEST, fPath)\n        });\n    }\n\n    //Handles param pointing to a file\n    let destdir = fPath.match(/[a-zA-z\\/]+(?=\\/)\\//mig);\n    return ({\n        src: path.join(SRC, fPath),\n        dest: (_.isArray(destdir)) ? path.join(DEST, destdir.join('')) : DEST\n    });\n};\n//-----------------------------------------------------------------------//\n\n\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~ REUSABLE PIPE COMPONENTS ~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ncatchErrors = lazypipe()\n    .pipe(p.plumber, { errorHandler: onError });\n\nconsoleTaskReport = lazypipe()\n    .pipe(catchErrors)\n    .pipe(p.print);\n\nnewerThanRootIfNotProduction = lazypipe()\n    .pipe(p.ifElse, !args.production, p.newer.bind(this, DEST));\n\n\n//\n// Lightweight templates for removing debug code when production flag set\n//\n// Removes single-line sections of javascript bookended by: /*<%*/  and  /*%>*/\n// E.g.  /*<%*/ console.log(\"this line of JS gets removed\"); /*%>*/\n// Removes multiline js blocks bookended by: /*<{{DEBUG*/  and  /*DEBUG}}>*/\n//                                    ...OR: /*<{{TEST*/   and   /*TEST}}>*/\n//\nrmDebugCode = lazypipe()\n    .pipe(p.ifElse, !!args.production, p.replace.bind(this,\n        /\\/\\*<\\%.*\\%\\>\\*\\//g, ''))\n    .pipe(p.ifElse, !!args.production, p.replace.bind(this,\n        /\\/\\*<\\{\\{DEBUG\\*\\/[\\s\\S]*?\\/\\*DEBUG\\}\\}\\>\\*\\//gm, ''))\n    .pipe(p.ifElse, !!args.production, p.replace.bind(this,\n        /\\/\\*<\\{\\{TEST\\*\\/[\\s\\S]*?\\/\\*TEST\\}\\}\\>\\*\\//gm, ''));\n//#################################################################################\n\n\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STYLES  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\n/**\n * Compile SCSS to CSS, output to build directory.\n */\ngulp.task('sass', function sass() {\n    let filePaths = resolveSrcAndDest(PATHS.scss, { ext: 'sass' });\n\n    return gulp.src(filePaths.src)\n        .pipe(consoleTaskReport())\n        .pipe(p.sass({errLogToConsole: true}))\n        .pipe(p.ifElse( !!args.stats, p.size ))\n        .pipe(gulp.dest(filePaths.dest));\n});\n//#################################################################################\n\n\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ JS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\n/**\n * Transpiles all js files in source directory (/src) from ECMA6 to ECMA5,\n * outputs resultant js files into build directory (/build).\n */\ngulp.task('js-build', () =>\n    consoleTaskReport().pipe(merge(PATHS.js.map( (files) => {\n        let filePaths = resolveSrcAndDest(files, { ext: 'js' });\n\n        return gulp.src(filePaths.src)\n            .pipe(p.filter(['*', '!**/*.swp', '!**/*.*~']))\n            .pipe(consoleTaskReport())\n            .pipe(p.babel({ compact: false }))\n                .on('error', onError)\n            .pipe(p.dev('got into js-build end!'))\n            .pipe(gulp.dest(filePaths.dest));\n\n    }))).on('error', onError));\n//#################################################################################\n\n\n/**\n * Remove all files from build folder\n */\ngulp.task( 'cleanup', ((next) => del(['build/**/*'], next)) );\n\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STATIC ASSETS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\n/**\n * Copies static assets from source directory into build directory.\n */\ngulp.task('copy', function copy(){\n    return merge(PATHS.static.map(function(files){\n        let filePaths = resolveSrcAndDest(files);\n\n        //Actually output the files\n        return gulp.src(filePaths.src)\n            .pipe(p.filter(['*', '!**/*.swp', '!**/*.*~']))\n            .pipe(consoleTaskReport())\n            .pipe(p.debug({title: 'copy static assets:'}))\n            .pipe(p.ifElse( !!args.stats, p.size ))\n            .pipe(gulp.dest(filePaths.dest));\n    }));\n});\n//#################################################################################\n\n\nfunction fileExists(filePath, callback){\n    fs.stat(filePath, (err, stats) => {\n        if (err) return callback(false);\n        return callback(stats.isFile());\n    });\n}\n\n\n/**\n * Each file\n * @param  {String}  filePath     path of file to check existence of\n * @param  {Boolean} isJSConfig   if true, will check for .js & .json of filePath\n *                                (filePath should have no ext in this case), &\n *                                only make new file if neither exist.\n * @param  {String}  defaultData  data to write into the file\n * @return {undefined}\n */\nfunction makeDefaultFiles(filePath, isJSConfig, defaultData){\n    if (isJSConfig) {\n\n        async.some([filePath + '.js', filePath + '.json'], fileExists, function(result){\n\n            if (result === true) return;\n            return fs.writeFile(filePath + '.json', defaultData, function(err) {\n                if (err) return console.log('_______openOrMake:: ERROR in fs.writeFile on ' + filePath + '.json. Error: ' + err);\n                return console.log('makeDefaultFiles:: new' + filePath + '.json file written!');\n            });\n        });\n\n    //if not js/json file\n    } else {\n\n        fileExists(filePath, function(doesExist){\n            if (doesExist === true) return;\n            return fs.writeFile(filePath, defaultData, function(err) {\n                if (err) return console.log('fs.writeFile ERROR: ' + filePath);\n                return console.log('fs.writeFile success for ' + filePath);\n            });\n        });\n    }\n\n}\n\n\n\n\n\n//***************** CREATE FILES IF THEY DON'T EXIST BASED ON CONFIG CONTENTS *****************//\ngulp.task('makeRoutes', function makeRoutes(){\n\n    var routes = require(path.join(__dirname, 'config/routes.json'));\n    var defJSON = '{\"default\":\"default\"}'; //def contents to write if no file\n\n    fs.readFile(path.join(__dirname, 'config/default_view_template.dust'), function(err, dustData) {\n        if (err) throw err;\n\n        fs.readFile(path.join(__dirname, 'config/default_frontend_js_file.js'), function(err, clientJSData) {\n\n            routes.forEach(function(route) {\n                var fn = (route.file || route.request_path);\n                var tplDataPathNoExt = path.join(__dirname, 'src/template-data', fn + '_tpldata'),\n                    tplViewPath = path.join(__dirname, 'src/views', fn + '_view.dust'),\n                    frontendJSPath = path.join(__dirname, 'src/public/javascripts', fn + '_frontend.js');\n\n                makeDefaultFiles( tplDataPathNoExt, true, defJSON );\n                makeDefaultFiles( tplViewPath, false, dustData );\n                makeDefaultFiles( frontendJSPath, false, _.template(clientJSData)(\n                              { routeNameCC: _.camelCase(fn), routeName: fn }\n                ) );\n            });\n\n        });\n\n    });\n\n    console.log('past forEach');\n\n});\n    //********************************************************************//\n\n\n\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LIVERELOAD SERVER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ngulp.task('server', function livereloadServer(){\n    livereload.listen();                    // listen for changes\n    return consoleTaskReport()\n        .pipe(p.nodemon({                       // configure nodemon\n            script: 'build/bin/launcher.js',    // the script to run the app\n            ext: 'js dust json css scss sass html htm png jpg gif hbs ejs rb xml jpeg avi mp3 mp4 mpg py txt env'\n\n        }).on('restart', () => {\n           livereload.listen();\n           return gulp.src('build/bin/launcher.js')   // when the app restarts, run livereload.\n                .pipe(consoleTaskReport())\n                .pipe(p.tap(() => {\n                    console.log('\\n' + gutil.colors.white.bold.bgGreen('\\n' +\n                    '     .......... RELOADING PAGE, PLEASE WAIT ..........\\n'));\n                }))\n                .pipe(notify({message: 'RELOADING PAGE, PLEASE WAIT', onLast: true}))\n                .pipe(wait(1500))\n                .pipe(livereload());\n        }));\n\n    });\n//#################################################################################\n\ngulp.task('build', ['sass', 'copy', 'js-build'] );\n\ngulp.task('watch', function(){\n    gulp.watch([SRC + '**/*.*', path.join(__dirname, 'config/**/*.*')], () =>\n        runSequence('makeRoutes', 'build'));\n});\n\ngulp.task('default', () => { runSequence('makeRoutes', 'build', 'watch'); });\n"
      ]
    },
    "mtime": 1440068988854
  },
  "{\"filename\":\"/home/andfaulkner/Projects/testbed/express-testbed-2/gulpfile.babel.js\",\"extra\":{},\"env\":{},\"retainLines\":false,\"nonStandard\":true,\"experimental\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"stage\":2,\"blacklist\":[],\"optional\":[],\"modules\":\"common\",\"moduleIds\":false,\"jsxPragma\":\"React.createElement\",\"plugins\":[],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"keepModuleIdExtensions\":false,\"auxiliaryCommentAfter\":\"\",\"externalHelpers\":false,\"metadataUsedHelpers\":false,\"breakConfig\":false,\"sourceType\":\"module\"}:5.8.22": {
    "metadata": {
      "modules": {
        "imports": [],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      },
      "usedHelpers": []
    },
    "ignored": false,
    "code": "\"use strict\";\n\nrequire(\"harmonize\")(); // ensure es6 works\n\nconsole.log(Error.stackTraceLimit);\n//console.dir(process, {showHidden: true, depth: 20, colors: true });\nconsole.dir(process.execArgv, { showHidden: true, depth: 20, colors: true });\n//console.dir(process.env);\nconsole.log(process.version);\n\nconsole.dir(process.config, { showHidden: true, depth: 20, colors: true });\n\nvar str = \"yay!\";\n\nvar gulp = require('gulp');\n\nrequire('colors');\n\n//NODE MODULES & JS LIBRARIES\nvar path = require('path'),\n    fs = require('fs-extra'),\n    yargs = require('yargs'),\n    merge = require('merge2'),\n    _ = require('lodash'),\n    del = require('del'),\n    async = require('async');\n\nrequire('shelljs/global');\n\n//ECMA 6 POLYFILL\nrequire('babel/register');\nObject.getPrototypeOf.toString = function () {\n    return Object.toString();\n};\n\n//------------------------------- PLUGINS --------------------------------//\n//PACKAGED GULP PLUGINS --- AVAILABLE VIA 'p.nameOfPackage'\nvar p = require('gulp-packages')(gulp, ['autoprefixer', // prefix css for multiple browsers\n'babel', // compile ECMA6 --> ECMA5\n'debug', // lists all files run thru it\n'dev', // Toggle html comments on & off\n'display-help', // Display help file\n'dust', // Compile Dust templates\n'express', // Launch express framework\n'exit', // Force quit Gulp process\n'filter', // Filter out unwanted files from stream\n'if-else', // if-else statements mid-stream\n'jshint', // display Javascript errors\n'newer', // Only push item through pipe if newer\n'livereload', // Relaunch in browser automatically\n'nodemon', // Keep server running - restart on crash\n'notify', // Tells you if a reload happens\n'plumber', // keep running if error occurs\n'print', // output errors to console\n'rename', // Rename files\n'replace', // find-and-replace text in files\n'requirejs-optimize', 'rimraf', // remove files\n'sass', // compile scss and sass --> css\n'shell', // run shell commands with gulp\n'size', // output file size\n'sourcemaps', // link up precompile and postcompile code\n'stats', // provides stats on files passed thru stream\n'sweetjs', // expand macros\n'tap', // run function mid-stream\n'webpack' // compile webpack\n]);\n\n//UNPACKAGEABLE GULP PLUGINS\nvar gutil = require('gulp-util');\nvar lazypipe = require('lazypipe');\nvar runSequence = require('run-sequence');\nvar livereload = require('gulp-livereload');\nvar notify = require('gulp-notify');\nvar wait = require('gulp-wait');\n//------------------------------------------------------------------------//\n\n//------------------------------ CONSTANTS -------------------------------//\nvar SRC = {};\n\nvar DEST = {};\n//------------------------------------------------------------------------//\n\n//------------------ COMMAND LINE PARAMETER HANDLING ---------------------//\n//Command line flags accepted by gulp\nvar cmds = ['test', 'production', 'stats', 'once'];\n\n/**\n * Populate args object w/ command line args, setting each that was received to\n  * true in the args object, & all others to false. Referenced by argument name.\n  * @example args.production set to true if gulp launched w/ gulp --production.\n  */\nvar args = (function populateArgs(argList, argObj) {\n    argList.forEach(function createArgObjFromArgArray(arg) {\n        argObj[arg] = yargs.argv[arg] === true;\n    });\n    return argObj;\n})(cmds, {});\n//------------------------------------------------------------------------//\n\n//------------------------------ UTILITIES ------------------------------//\n/**\n * Output webpack errors when caught.\n */\nvar onError = function onError(err) {\n    gutil.beep();\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    console.log('ERROR OCCURRED');\n    console.log(typeof err);\n    console.log(gutil.colors.red.bgWhite(err.toString()));\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    this.emit('restart');\n    this.emit('end');\n};\n\nvar fileExists = function fileExists(filePath, callback) {\n    fs.stat(filePath, function (err, stats) {\n        if (err) return callback(false);\n        return callback(stats.isFile());\n    });\n};\n\n//------------------------------------------------------------------------//\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~ REUSABLE PIPE COMPONENTS ~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\nvar catchErrors = lazypipe().pipe(p.plumber, { errorHandler: onError });\n\nvar consoleTaskReport = lazypipe().pipe(catchErrors).pipe(p.print);\n\nvar newerThanRootIfNotProduction = lazypipe().pipe(p.ifElse, !args.production, p.newer.bind(undefined, DEST));\n\n//\n// Lightweight templates for removing debug code when production flag set\n//\n// Removes single-line sections of javascript bookended by: /*<%*/  and  /*%>*/\n// E.g.  /*<%*/ console.log(\"this line of JS gets removed\"); /*%>*/\n// Removes multiline js blocks bookended by: /*<{{DEBUG*/  and  /*DEBUG}}>*/\n//                                    ...OR: /*<{{TEST*/   and   /*TEST}}>*/\n//\nvar rmDebugCode = lazypipe().pipe(p.ifElse, !!args.production, p.replace.bind(undefined, /\\/\\*<\\%.*\\%\\>\\*\\//g, '')).pipe(p.ifElse, !!args.production, p.replace.bind(undefined, /\\/\\*<\\{\\{DEBUG\\*\\/[\\s\\S]*?\\/\\*DEBUG\\}\\}\\>\\*\\//gm, '')).pipe(p.ifElse, !!args.production, p.replace.bind(undefined, /\\/\\*<\\{\\{TEST\\*\\/[\\s\\S]*?\\/\\*TEST\\}\\}\\>\\*\\//gm, ''));\n//#################################################################################\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LIST ALL GULP TASKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ngulp.task('get-tasks', function () {\n    return process.nextTick(function () {\n        console.log('\\n_________ALL REGISTERED GULP TASKS_________');\n        Object.keys(gulp.tasks).forEach(function (t) {\n            return t === 'install' || t === 'uninstall' ? null : console.log('-- ' + t.bgBlack.green);\n        });\n        console.log('___________________________________________\\n');\n    });\n});\n//#################################################################################\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LIVERELOAD SERVER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ngulp.task('server', function livereloadServer() {\n    livereload.listen(); // listen for changes\n    return consoleTaskReport().pipe(p.nodemon({ // configure nodemon\n        script: 'app/index.js', // the script to run the app\n        js: 'node --es_staging --harmony --harmony_proxies --stack_trace_limit=1000 --harmony_modules',\n        ext: 'js dust json css scss sass html htm png jpg gif hbs ejs rb xml xsl jpeg avi mp3 mp4 mpg py txt env sh'\n    }).on('restart', function () {\n        livereload.listen();\n        return gulp.src('build/bin/launcher.js') // when the app restarts, run livereload.\n        .pipe(consoleTaskReport()).pipe(p.tap(function () {\n            console.log('\\n' + gutil.colors.white.bold.bgGreen('\\n' + '     .......... RELOADING PAGE, PLEASE WAIT ..........\\n'));\n        })).pipe(notify({ message: 'RELOADING PAGE, PLEASE WAIT', onLast: true })).pipe(wait(1500)).pipe(livereload());\n    }));\n});\n//################################################################################\n\ngulp.task('copy-static', function () {\n    return gulp.src(['./app/**/*.*', '!./app/**/*.js']).pipe(gulp.dest('./src'));\n});\n\ngulp.task('compile-sweet-macros', function compileSweetMacros() {\n    return gulp.src(['./app/**/*.js']).pipe(consoleTaskReport()).pipe(p.sweetjs({ modules: ['./macros-test'] })).pipe(gulp.dest('./src'));\n});\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~ CONVERT COMMONJS LIBS TO AMD FOR REQUIREJS ~~~~~~~~~~~~~~~~~~\n//################################################################################\n\n//################################################################################\n\ngulp.task('watch', function () {\n    gulp.watch([SRC + '**/*.*', path.join(__dirname, 'config/**/*.*')], function () {\n        return runSequence('makeRoutes', 'build');\n    });\n});\n//# sourceMappingURL=data:application/json;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "/home/andfaulkner/Projects/testbed/express-testbed-2/gulpfile.babel.js"
      ],
      "names": [],
      "mappings": "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",
      "file": "/home/andfaulkner/Projects/testbed/express-testbed-2/gulpfile.babel.js",
      "sourcesContent": [
        "require(\"harmonize\")(); // ensure es6 works\n\nconsole.log(Error.stackTraceLimit);\n//console.dir(process, {showHidden: true, depth: 20, colors: true });\nconsole.dir(process.execArgv, {showHidden: true, depth: 20, colors: true });\n//console.dir(process.env);\nconsole.log(process.version);\n\nconsole.dir(process.config, {showHidden: true, depth: 20, colors: true });\n\nlet str = \"yay!\";\n\nvar gulp = require('gulp');\n\nrequire('colors');\n\n//NODE MODULES & JS LIBRARIES\nvar path    = require('path'),\n    fs      = require('fs-extra'),\n    yargs   = require('yargs'),\n    merge   = require('merge2'),\n    _       = require('lodash'),\n    del     = require('del'),\n    async   = require('async');\n\nrequire('shelljs/global');\n\n//ECMA 6 POLYFILL\nrequire('babel/register');\nObject.getPrototypeOf.toString = function() {\n    return Object.toString();\n};\n\n//------------------------------- PLUGINS --------------------------------//\n//PACKAGED GULP PLUGINS --- AVAILABLE VIA 'p.nameOfPackage'\nvar p = require('gulp-packages')(gulp, [\n    'autoprefixer',             // prefix css for multiple browsers\n    'babel',                    // compile ECMA6 --> ECMA5\n    'debug',                    // lists all files run thru it\n    'dev',                      // Toggle html comments on & off\n    'display-help',             // Display help file\n    'dust',                     // Compile Dust templates\n    'express',                  // Launch express framework\n    'exit',                     // Force quit Gulp process\n    'filter',                   // Filter out unwanted files from stream\n    'if-else',                  // if-else statements mid-stream\n    'jshint',                   // display Javascript errors\n    'newer',                    // Only push item through pipe if newer\n    'livereload',               // Relaunch in browser automatically\n    'nodemon',                  // Keep server running - restart on crash\n    'notify',                   // Tells you if a reload happens\n    'plumber',                  // keep running if error occurs\n    'print',                    // output errors to console\n    'rename',                   // Rename files\n    'replace',                  // find-and-replace text in files\n    'requirejs-optimize',\n    'rimraf',                   // remove files\n    'sass',                     // compile scss and sass --> css\n    'shell',                    // run shell commands with gulp\n    'size',                     // output file size\n    'sourcemaps',               // link up precompile and postcompile code\n    'stats',                    // provides stats on files passed thru stream\n    'sweetjs',                  // expand macros\n    'tap',                      // run function mid-stream\n    'webpack'                   // compile webpack\n]);\n\n//UNPACKAGEABLE GULP PLUGINS\nvar gutil = require('gulp-util');\nvar lazypipe = require('lazypipe');\nvar runSequence = require('run-sequence');\nvar livereload = require('gulp-livereload');\nvar notify = require('gulp-notify');\nvar wait = require('gulp-wait');\n//------------------------------------------------------------------------//\n\n//------------------------------ CONSTANTS -------------------------------//\nvar SRC = {\n};\n\nvar DEST = {\n\n};\n//------------------------------------------------------------------------//\n\n\n//------------------ COMMAND LINE PARAMETER HANDLING ---------------------//\n//Command line flags accepted by gulp\nvar cmds = ['test', 'production', 'stats', 'once'];\n\n/**\n * Populate args object w/ command line args, setting each that was received to\n  * true in the args object, & all others to false. Referenced by argument name.\n  * @example args.production set to true if gulp launched w/ gulp --production.\n  */\nvar args = (function populateArgs(argList, argObj){\n    argList.forEach(function createArgObjFromArgArray(arg){\n        argObj[arg] = (yargs.argv[arg] === true);\n    });\n    return argObj;\n}(cmds, {}));\n//------------------------------------------------------------------------//\n\n//------------------------------ UTILITIES ------------------------------//\n/**\n * Output webpack errors when caught.\n */\nvar onError = function onError(err) {\n    gutil.beep();\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    console.log('ERROR OCCURRED');\n    console.log(typeof err);\n    console.log(gutil.colors.red.bgWhite(err.toString()));\n    console.log(gutil.colors.red.bgWhite('-----------------------------------'));\n    this.emit('restart');\n    this.emit('end');\n};\n\nvar fileExists = function fileExists(filePath, callback){\n    fs.stat(filePath, (err, stats) => {\n        if (err) return callback(false);\n        return callback(stats.isFile());\n    });\n}\n\n//------------------------------------------------------------------------//\n\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~ REUSABLE PIPE COMPONENTS ~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\nvar catchErrors = lazypipe()\n    .pipe(p.plumber, { errorHandler: onError });\n\nvar consoleTaskReport = lazypipe()\n    .pipe(catchErrors)\n    .pipe(p.print);\n\nvar newerThanRootIfNotProduction = lazypipe()\n    .pipe(p.ifElse, !args.production, p.newer.bind(this, DEST));\n\n\n//\n// Lightweight templates for removing debug code when production flag set\n//\n// Removes single-line sections of javascript bookended by: /*<%*/  and  /*%>*/\n// E.g.  /*<%*/ console.log(\"this line of JS gets removed\"); /*%>*/\n// Removes multiline js blocks bookended by: /*<{{DEBUG*/  and  /*DEBUG}}>*/\n//                                    ...OR: /*<{{TEST*/   and   /*TEST}}>*/\n//\nvar rmDebugCode = lazypipe()\n    .pipe(p.ifElse, !!args.production,\n        p.replace.bind(this, /\\/\\*<\\%.*\\%\\>\\*\\//g, ''))\n    .pipe(p.ifElse, !!args.production,\n        p.replace.bind(this, /\\/\\*<\\{\\{DEBUG\\*\\/[\\s\\S]*?\\/\\*DEBUG\\}\\}\\>\\*\\//gm, ''))\n    .pipe(p.ifElse, !!args.production,\n        p.replace.bind(this, /\\/\\*<\\{\\{TEST\\*\\/[\\s\\S]*?\\/\\*TEST\\}\\}\\>\\*\\//gm, ''));\n//#################################################################################\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LIST ALL GULP TASKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ngulp.task('get-tasks', () =>\n    (process.nextTick(() => {\n        console.log('\\n_________ALL REGISTERED GULP TASKS_________');\n        Object.keys(gulp.tasks).forEach((t) =>\n            ((t === 'install' || t === 'uninstall') ? null :\n                console.log('-- ' + t.bgBlack.green)))\n        console.log('___________________________________________\\n');\n    })));\n//#################################################################################\n\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LIVERELOAD SERVER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//################################################################################\ngulp.task('server', function livereloadServer(){\n    livereload.listen();                    // listen for changes\n    return consoleTaskReport()\n        .pipe(p.nodemon({                       // configure nodemon\n            script: 'app/index.js',    // the script to run the app\n            js: 'node --es_staging --harmony --harmony_proxies --stack_trace_limit=1000 --harmony_modules',\n            ext: 'js dust json css scss sass html htm png jpg gif hbs ejs rb xml xsl jpeg avi mp3 mp4 mpg py txt env sh'\n        }).on('restart', () => {\n           livereload.listen();\n           return gulp.src('build/bin/launcher.js')   // when the app restarts, run livereload.\n                .pipe(consoleTaskReport())\n                .pipe(p.tap(() => {\n                    console.log('\\n' + gutil.colors.white.bold.bgGreen('\\n' +\n                    '     .......... RELOADING PAGE, PLEASE WAIT ..........\\n'));\n                }))\n                .pipe(notify({message: 'RELOADING PAGE, PLEASE WAIT', onLast: true}))\n                .pipe(wait(1500))\n                .pipe(livereload());\n        }));\n\n    });\n//################################################################################\n\ngulp.task('copy-static', function(){\n    return gulp.src(['./app/**/*.*', '!./app/**/*.js'])\n        .pipe(gulp.dest('./src'));\n});\n\ngulp.task('compile-sweet-macros', function compileSweetMacros(){\n    return gulp.src(['./app/**/*.js'])\n        .pipe(consoleTaskReport())\n        .pipe(p.sweetjs({ modules: ['./macros-test'] }))\n        .pipe(gulp.dest('./src'));\n});\n\n//################################################################################\n//#~~~~~~~~~~~~~~~~~ CONVERT COMMONJS LIBS TO AMD FOR REQUIREJS ~~~~~~~~~~~~~~~~~~\n//################################################################################\n\n//################################################################################\n\n\ngulp.task('watch', function(){\n    gulp.watch([SRC + '**/*.*', path.join(__dirname, 'config/**/*.*')],\n                () => runSequence('makeRoutes', 'build'));\n});\n"
      ]
    },
    "mtime": 1440828604133
  }
}